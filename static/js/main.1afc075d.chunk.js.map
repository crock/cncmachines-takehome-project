{"version":3,"sources":["reducers/TodoReducer.js","components/ActiveTodos.js","components/CompletedTodos.js","App.js","serviceWorker.js","index.js"],"names":["todoReducer","state","action","type","todos","push","payload","index","indexOf","splice","Error","ActiveList","_ref","saveTodo","_useReducer","deleteTodo","useReducer","_useReducer2","Object","slicedToArray","_useState","useState","_useState2","value","setValue","handleInputChange","e","target","addItem","react_default","a","createElement","react_beautiful_dnd_esm","droppableId","provided","snapshot","assign","ref","innerRef","droppableProps","className","map","todo","key","draggableId","draggableProps","dragHandleProps","placeholder","onChange","onClick","CompletedList","completed","App","setTodos","_useState3","_useState4","onDragEnd","result","destination","console","log","source","t1","t2","ActiveTodos","todoText","trimmedText","trim","length","concat","toConsumableArray","CompletedTodos","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1afc075d.chunk.js","sourcesContent":["import React from 'react'\n\nfunction todoReducer(state, action) {\n    switch (action.type) {\n        case 'add-todo': \n            return {\n                todos: state.todos.push(action.payload)\n            }\n        case 'remove-todo':\n            let index = state.todos.indexOf(action.payload)\n            return {\n                todos: state.todos.splice(index, 1, action.payload)\n            }\n        default:\n            throw new Error()\n    }\n}\n\nexport default todoReducer\n","import React, { Component, useState, useReducer } from 'react';\nimport todoReducer from '../reducers/TodoReducer';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\n\nconst ActiveList = ({ todos, saveTodo, deleteTodo }) => {\n\n    const initialState = {\n        todos: [\n            'example task 1'\n        ]\n    }\n\n    const [state, dispatch] = useReducer(todoReducer, initialState)\n    const [value, setValue] = useState('')\n\n    const handleInputChange = e => {\n        setValue(e.target.value)\n    }\n\n    const addItem = () => {\n\n        if(!value) return\n\n        saveTodo(value)\n\n        setValue('')\n    }\n\n    return (\n        <Droppable droppableId=\"active\">\n            {(provided, snapshot) => (\n                <div \n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className=\"todo-list\"\n                >\n                    <h3>Active</h3>\n                    <ul>\n                        {todos.map((todo, index) =>\n                            <Draggable key={index} draggableId={index + 1} index={index}>\n                                {(provided, snapshot) => (\n                                    <li\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                    >\n                                        {todo}\n                                    </li>    \n                                )}\n                            </Draggable>\n                        )}\n                    </ul>\n                    <div className=\"form-group\">\n                        <input type=\"text\" \n                            placeholder=\"Add a todo...\"\n                            onChange={handleInputChange}\n                            value={value} />\n                        <button onClick={addItem}>Add</button>\n                    </div>\n                </div>\n            )}\n        </Droppable>\n    )\n}\n\nexport default ActiveList;","import React, { Component, useState } from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\n\nconst CompletedList = ({ completed, saveTodo, deleteTodo }) => {\n\n    const initialState = {\n        completed: []\n    }\n    const [value, setValue] = useState('')\n\n    const addItem = () => {\n\n        if(!value) return\n\n        saveTodo(value)\n    }\n\n    return (\n        <Droppable droppableId=\"completed\">\n            {(provided, snapshot) => (\n                <div \n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className=\"todo-list\"\n                >\n                    <h3>Completed</h3>\n                    <ul>\n                        {completed.map((todo, index) =>\n                            <Draggable key={index} draggableId={index + 1} index={index}>\n                                {(provided, snapshot) => (\n                                    <li\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                    >\n                                        {todo}\n                                    </li>    \n                                )}\n                            </Draggable>\n                        )}\n                    </ul>\n                </div>\n            )}\n        </Droppable>\n    )\n}\n\nexport default CompletedList;","import React, { useState } from 'react';\nimport './App.scss';\nimport ActiveList from './components/ActiveTodos';\nimport CompletedList from './components/CompletedTodos';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nexport const themes = {\n  light: {\n    foreground: '#000000',\n    background: '#eeeeee',\n  },\n  dark: {\n    foreground: '#ffffff',\n    background: '#222222',\n  },\n};\n\nconst App  = () =>  {\n\n  const [todos, setTodos] = useState([])\n  const [completed, setCompleted] = useState([])\n\n  const onDragEnd = (result) => {\n    if (result.destination == null) return\n\n    console.log(result)\n    if (result.source.droppableId !== result.destination.droppableId) {\n      switch (result.destination.droppableId) {\n        case \"completed\":\n          console.log(\"dropped on completed\")\n          let t1 = todos.splice(result.source.index, 1)\n          completed.splice(result.destination.index, 0, t1)\n          break\n        case \"active\":\n          console.log(\"dropped on active\")\n          let t2 = completed.splice(result.source.index, 1)\n          todos.splice(result.destination.index, 0, t2)\n          break\n      }\n    }\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"App\">\n        <ActiveList \n          saveTodo={todoText => {\n            const trimmedText = todoText.trim();\n            if (trimmedText.length > 0) {\n              setTodos([...todos, trimmedText]);\n            }\n          }} \n          todos={todos} \n        />\n        <div className=\"dragdrop-cue\">\n        Drag &amp; Drop\n        <br />\n        &lt;--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&gt;\n        </div>\n        <CompletedList\n          completed={completed}\n        />\n      </div>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}